<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sfloat的博客</title>
  <subtitle>阻止成长的不是无知，而是傲慢与偏见</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nodesoya.github.io/"/>
  <updated>2017-07-30T06:32:30.406Z</updated>
  <id>https://nodesoya.github.io/</id>
  
  <author>
    <name>sfloat</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端武林之十招设计模式</title>
    <link href="https://nodesoya.github.io/2017/07/30/%E5%89%8D%E7%AB%AF%E6%AD%A6%E6%9E%97%E4%B9%8B%E5%8D%81%E6%8B%9B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://nodesoya.github.io/2017/07/30/前端武林之十招设计模式/</id>
    <published>2017-07-30T03:44:49.000Z</published>
    <updated>2017-07-30T06:32:30.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>天下武功，唯快不破，而习武却止于形者，往往套路舞到完，拳头吃到饱。我们不仅要知其然，更要知其所以然。下面我们就一起来剖析前端武林的十招设计模式，每招设计模式分为：描述、剖析、栗子三个部分，栗子主要来自少林寺场景，方便大家理解。</p>
<h2 id="第一式：单例模式"><a href="#第一式：单例模式" class="headerlink" title="第一式：单例模式"></a>第一式：单例模式</h2><blockquote>
<p>描述：保证一个类只有一个实例</p>
</blockquote>
<h4 id="剖析"><a href="#剖析" class="headerlink" title="剖析"></a>剖析</h4><p>为的是去除重复实例化类的性能冗余和空间冗余。DOM的创建过程也同样适用。</p>
<h4 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h4><p>练拳需要沙袋，如果每次练都挂一个沙袋，不仅空间浪费，还耗时耗力</p>
<h2 id="第二式：构造函数模式"><a href="#第二式：构造函数模式" class="headerlink" title="第二式：构造函数模式"></a>第二式：构造函数模式</h2><blockquote>
<p>描述：构造函数用于创建特定类型对象，可接受参数设置对象成员值，自定义的属性和方法</p>
</blockquote>
<h4 id="剖析-1"><a href="#剖析-1" class="headerlink" title="剖析"></a>剖析</h4><p>为的是去除兄弟类之间相同方法的冗余。将不同的属性、方法的构建封装在构造函数中，产出不同的对象</p>
<h4 id="栗子-1"><a href="#栗子-1" class="headerlink" title="栗子"></a>栗子</h4><p>大师兄和二师兄练铁砂掌都需要灶台、锅、沙子，大师兄功力强要更烫、更细的沙子，但不会为两个师兄弟分别做一个灶台，而是谁要练就换自己需要的沙子</p>
<h2 id="第三式：工厂模式"><a href="#第三式：工厂模式" class="headerlink" title="第三式：工厂模式"></a>第三式：工厂模式</h2><blockquote>
<p>描述：工厂模式定义一个用于创建对象的接口，该接口由子类决定实例化哪一个类。该模式使一个类的实例化延迟到了子类</p>
</blockquote>
<h4 id="剖析-2"><a href="#剖析-2" class="headerlink" title="剖析"></a>剖析</h4><p>对于功能相似的类，往往我们需要根据环境进行选择性的实例化。而工厂模式就是将这个选择过程封装起来，统一接口。</p>
<h4 id="栗子-2"><a href="#栗子-2" class="headerlink" title="栗子"></a>栗子</h4><p>寺内轮流值班扫地，如果每次临时确定谁值班必然耗时耗力，所以需要由一个人统一规划，大家不懂就只管问他。</p>
<h2 id="第四式：代理模式"><a href="#第四式：代理模式" class="headerlink" title="第四式：代理模式"></a>第四式：代理模式</h2><blockquote>
<p>描述：为其他对象提供一种代理以控制对这个对象的访问。</p>
</blockquote>
<h4 id="剖析-3"><a href="#剖析-3" class="headerlink" title="剖析"></a>剖析</h4><p>对象对外访问有时候需要进行进一步加强，比如安全校验、跨域能力。而代理模式就是将加强部分进行封装和划分，方便后期维护。</p>
<h4 id="栗子-3"><a href="#栗子-3" class="headerlink" title="栗子"></a>栗子</h4><p>师傅年纪大了，腿脚不利索，访问武当，峨眉的这些重活累活只能交给徒弟，为了方便后面一起传授访问技巧，而不是一个个去教，需要把这些徒弟聚在一起组成徒弟代理团</p>
<h2 id="第五式：建造者模式"><a href="#第五式：建造者模式" class="headerlink" title="第五式：建造者模式"></a>第五式：建造者模式</h2><blockquote>
<p>描述：建造者模式可以将一个复杂对象的构建与其表示相分离，使得同样的构建过程可以创建不同的表示</p>
</blockquote>
<h4 id="剖析-4"><a href="#剖析-4" class="headerlink" title="剖析"></a>剖析</h4><p>建造者模式主要用于复杂的场景，将一个复杂的模块分成多个子模块，进行不同的组装，以增加子模块的复用，去除不同组装时子模块冗余</p>
<h4 id="栗子-4"><a href="#栗子-4" class="headerlink" title="栗子"></a>栗子</h4><p>十八罗汉阵阵型变化多端，但是无论怎么变需要的只是十八个人，而不会每变一次就换一批人</p>
<h2 id="第六式：命令模式"><a href="#第六式：命令模式" class="headerlink" title="第六式：命令模式"></a>第六式：命令模式</h2><blockquote>
<p>描述：用来对方法调用进行参数化处理和传送，经过这样处理过后的方法可以在任何需要的时候执行</p>
</blockquote>
<h4 id="剖析-5"><a href="#剖析-5" class="headerlink" title="剖析"></a>剖析</h4><p>将多个功能封装起来，划分进入一个对象，然后通过传入的命令参数实现不同功能的执行。降低了对这个对象的维护成本，和他人使用这个对象时的学习成本</p>
<h4 id="栗子-5"><a href="#栗子-5" class="headerlink" title="栗子"></a>栗子</h4><p>师傅要每天要从后勤找一个人下山挑水，但是人老了记性不好，每次叫人都记不住名字，干脆就让后勤自己确定谁去挑水，师傅只管下一声命令：挑水</p>
<h2 id="第七式：观察者模式"><a href="#第七式：观察者模式" class="headerlink" title="第七式：观察者模式"></a>第七式：观察者模式</h2><blockquote>
<p>描述：观察者模式又叫发布订阅模式，它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象</p>
</blockquote>
<h4 id="剖析-6"><a href="#剖析-6" class="headerlink" title="剖析"></a>剖析</h4><p>这是一个改变触发位置的模式，正常我们在哪里需要触发哪些类，我们会在当前类直接调用触发，而观察这模式就是将这个触发的位置转移到了被触发的类，解耦两个类，方便后期维护</p>
<h4 id="栗子-6"><a href="#栗子-6" class="headerlink" title="栗子"></a>栗子</h4><p>食堂吃饭的时候，如果让施粥的人每桌走过去一个个的施，可能施粥的很快就会累倒，所以就干脆让谁想喝自己过来盛。这样施粥的就轻松了，压力也分摊到了每个喝粥的人身上</p>
<h2 id="第八式：适配器模式"><a href="#第八式：适配器模式" class="headerlink" title="第八式：适配器模式"></a>第八式：适配器模式</h2><blockquote>
<p>描述：适配器模式是将一个类（对象）的接口（方法或属性）转换成客户希望的另外一个接口</p>
</blockquote>
<h4 id="剖析-7"><a href="#剖析-7" class="headerlink" title="剖析"></a>剖析</h4><p>这个和代理模式有点像，只是划分的内容不同。适配器模式是将两个对象在连接时做的兼容部分划分出来，方便后期的维护。</p>
<h4 id="栗子-7"><a href="#栗子-7" class="headerlink" title="栗子"></a>栗子</h4><p>武当和少林时常有往来，但是每次交流都会碰到习惯，作息等不同带来的麻烦。为了交流方便，在中间建立一个亭子，方便双方的沟通交流</p>
<h2 id="第九式：职责链模式"><a href="#第九式：职责链模式" class="headerlink" title="第九式：职责链模式"></a>第九式：职责链模式</h2><blockquote>
<p>描述：职责链模式是使多个对象都有机会处理请求，从而避免请求发送者和接受者之前的耦合关系</p>
</blockquote>
<h4 id="剖析-8"><a href="#剖析-8" class="headerlink" title="剖析"></a>剖析</h4><p>将一个处理流程划分多个模块，组成一个流程链，方便对流程的每个环节进行维护。</p>
<h4 id="栗子-8"><a href="#栗子-8" class="headerlink" title="栗子"></a>栗子</h4><p>一个消息过来少林寺，由执事、班首、监寺、方丈。层层传递，直到有一个最合适的处理人，而且职责分明方便人员调配</p>
<h2 id="第十式：迭代器模式"><a href="#第十式：迭代器模式" class="headerlink" title="第十式：迭代器模式"></a>第十式：迭代器模式</h2><blockquote>
<p>描述：迭代器模式提供一种方法顺序访问一个聚合对象中各个元素，而又不需要暴露该方法的内部表示</p>
</blockquote>
<h4 id="剖析-9"><a href="#剖析-9" class="headerlink" title="剖析"></a>剖析</h4><p>将遍历方法划入对象内部，提升遍历代码的复用度。</p>
<h4 id="栗子-9"><a href="#栗子-9" class="headerlink" title="栗子"></a>栗子</h4><p>师傅需要知道武僧团有多少人，会让每个人报数，而不是一个个去数。自己数每换一个师傅就得数一遍，而报数是由武僧团来完成的</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上可以看出十招设计模式主要做的两个事：去冗余和划分模块，大家可以想想十个中哪些主要去了冗余，而哪些主要划分了模块。而去冗余提升了性能，划分模块降低了维护成本。这也是设计模式存在的意义，提升项目的性价比。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;天下武功，唯快不破，而习武却止于形者，往往套路舞到完，拳头吃到饱。我们不仅要知其然，更要知其所以然。下面我们就一起来剖析前端武林的十招设计模
    
    </summary>
    
      <category term="系统优化" scheme="https://nodesoya.github.io/categories/%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript的表现力来源</title>
    <link href="https://nodesoya.github.io/2017/05/19/JavaScript%E7%9A%84%E8%A1%A8%E7%8E%B0%E5%8A%9B%E6%9D%A5%E6%BA%90/"/>
    <id>https://nodesoya.github.io/2017/05/19/JavaScript的表现力来源/</id>
    <published>2017-05-19T09:45:20.000Z</published>
    <updated>2017-05-19T12:08:54.685Z</updated>
    
    <content type="html"><![CDATA[<p>适读人群：想对JavaScript做深入了解的前端工程师</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>JavaScript是一门灵活且有表现力的语言，当然灵活也带来了很多坑。那么JavaScript的表现力核心在哪里呢？我认为主要有三个地方：this，作用域，原型链。</p>
<h2 id="一．This"><a href="#一．This" class="headerlink" title="一．This"></a>一．This</h2><p>相信大家对This并不陌生，This是一个指向对象的指针，往往谁调它它指谁。而调用的环境是多变的，也就带来了this指向的灵活。</p>
<p>默认this的指向是global。如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">38</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showNumber</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">1</span></div><div class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</div><div class="line">&#125;</div><div class="line"></div><div class="line">showNumber() <span class="comment">// 输出：38，this指向为global</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showAll</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">183</span></div><div class="line">    <span class="keyword">var</span> showNumber = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> showNumber()</div><div class="line">&#125;</div><div class="line"></div><div class="line">showAll() <span class="comment">// 输出：38，即时在函数内，没有定义为对象属性调用该函数的依旧是global</span></div></pre></td></tr></table></figure></p>
<p>如果调用函数的是某对象时，则函数内的this指向该对象。如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">38</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showNumber</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">1</span></div><div class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> methodsObj = &#123;<span class="attr">a</span>: <span class="number">110</span>&#125;</div><div class="line">methodsObj.showNumber = showNumber</div><div class="line"></div><div class="line">methodsObj.showNumber() <span class="comment">// 输出：110，因为调用该函数的是methodsObj</span></div><div class="line"><span class="keyword">new</span> showNumber() <span class="comment">// 输出：undefined，new构造了新的对象，调用函数的是新对象</span></div></pre></td></tr></table></figure></p>
<p>This不仅有默认的指向，而且它是可以设置的，通过call，apply即可设置。从而实现两个对象的弱连接，得以共享数据和方法。如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a + <span class="keyword">this</span>.b)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> dataObj = &#123;<span class="attr">a</span>: <span class="number">110</span>, <span class="attr">b</span>: <span class="number">200</span>&#125;</div><div class="line"></div><div class="line">add.call(dataObj) <span class="comment">// 输出：310</span></div></pre></td></tr></table></figure></p>
<p>上面这个例子中，对于对象dataObj来说是共享了global的方法add，处理了自己的数据。而对于global则是共享了dataObj的数据，让global的方法得以获取。</p>
<h2 id="二．作用域"><a href="#二．作用域" class="headerlink" title="二．作用域"></a>二．作用域</h2><p>直接讲作用域可能大家是陌生的，但闭包大家一定不陌生，而闭包的原理就在作用域上。JS是中最小的作用域单位是函数，所以带来了闭包，闭包在多种场景中都有使用，比如私有变量，块作用域等。如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 私有变量 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addFactory</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">110</span>, b = <span class="number">330</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        a = a+<span class="number">8</span></div><div class="line">        <span class="built_in">console</span>.log(a + b)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> add = addFactory()</div><div class="line">add() <span class="comment">// 输出：448</span></div><div class="line">add() <span class="comment">// 输出：456，a变量作为add的私有变量，外部不可见</span></div><div class="line"></div><div class="line"><span class="comment">/* 块作用域 */</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(i) <span class="comment">// 输出：五个5</span></div><div class="line">    &#125;, <span class="number">100</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(i) <span class="comment">// 输出：0,1,2,3,4，因为闭包封装了一块作用域，使其不受外部变量影响</span></div><div class="line">        &#125;, <span class="number">100</span>)</div><div class="line">    &#125;)(i)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而且函数内声明的变量真实的执行顺序是在顶部，因为无需考虑块作用域的情况。如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(a)</div><div class="line">     <span class="built_in">console</span>.log(foo())</div><div class="line">     <span class="keyword">var</span> a = <span class="number">1</span></div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="keyword">return</span> <span class="number">2</span></div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> test() <span class="comment">// 输出：undefined，2</span></div><div class="line"></div><div class="line"><span class="comment">// 上述test函数相当于</span></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> a</div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="keyword">return</span> <span class="number">2</span></div><div class="line">     &#125;</div><div class="line">     <span class="built_in">console</span>.log(a)</div><div class="line">     <span class="built_in">console</span>.log(foo())</div><div class="line">     a = <span class="number">1</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h2 id="三．原型链"><a href="#三．原型链" class="headerlink" title="三．原型链"></a>三．原型链</h2><p>原型链是js类继承的实现方式，通过原型链实现了js对象的强连接，让this直接调用父对象的属性。如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'haki'</span></div><div class="line">&#125;</div><div class="line">Animal.prototype.speak = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' is '</span> + <span class="keyword">this</span>.age + <span class="string">' years old'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.age = <span class="string">'33'</span></div><div class="line">&#125;</div><div class="line">People.prototype = <span class="keyword">new</span> Animal()</div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> People()</div><div class="line">person.speak() <span class="comment">// haki is 33 years old</span></div></pre></td></tr></table></figure></p>
<p>上面的例子中People通过prototype和new实现了继承Animal，而这个过程是怎么实现的呢？主要是两步：<br>1.将prototype指向需要继承的对象<br>2.通过new实例化对象(创建新对象-&gt;_proto_指向prototype-&gt;执行构造函数)</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上就是我认为JavaScript表现力的来源，这些特性带来了灵活性，但是用的不好也会导致代码的不易维护，所以在现实场景中怎么根据需求活学活用是很重要的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;适读人群：想对JavaScript做深入了解的前端工程师&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;JavaScript是一门灵活且有表现力的语言，当然灵活也带来了很多
    
    </summary>
    
      <category term="语言本身" scheme="https://nodesoya.github.io/categories/%E8%AF%AD%E8%A8%80%E6%9C%AC%E8%BA%AB/"/>
    
    
      <category term="JavaScript" scheme="https://nodesoya.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>六步搞定组件化单页面</title>
    <link href="https://nodesoya.github.io/2017/05/17/%E5%85%AD%E6%AD%A5%E6%90%9E%E5%AE%9A%E7%BB%84%E4%BB%B6%E5%8C%96%E5%8D%95%E9%A1%B5%E9%9D%A2/"/>
    <id>https://nodesoya.github.io/2017/05/17/六步搞定组件化单页面/</id>
    <published>2017-05-17T07:39:52.000Z</published>
    <updated>2017-05-18T07:41:22.114Z</updated>
    
    <content type="html"><![CDATA[<p>适读人群：<br>1.具备工程化思维的前端<br>2.想了解现阶段前后端的合作方式的后端</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>文章以单页面为核心阐述它的实现过程，里面涉及概念的东西不多，因为考虑到讲概念去对大家帮助不大，而且这些概念随手百度google都可以找到。所以文章主要从大体步骤的角度简单讲讲的是我是如何将OA重构成组件化单页面应用，并且实现通过配置完成新流程的动态添加的。希望大家读完后能对此类项目有个基本的实现思路</p>
<h2 id="第一步：制定组件标准"><a href="#第一步：制定组件标准" class="headerlink" title="第一步：制定组件标准"></a>第一步：制定组件标准</h2><blockquote>
<p>TIPS：车在组装各零件之前，得先将各个零件规范起来，不能这个轮子1m长那个轮子1.2m的，这样就四不像了。</p>
</blockquote>
<p>实现组件化的前提是得标准化。怎么完成标准化呢？大概步骤可分为三步：<br>1.以重用度为标准归纳和分类各组件。而组件中主要分为两种：通用组件和业务组件，通用组件如弹窗、按钮、时间插件等，业务组件如顶部个人信息，机票块信息等跟业务相关的组件。<br>2.将归纳出来的组件进行设计，统一风格。<br>3.根据UI给的设计图编写组件库。类似微信的WeUI，我也写了一个OAUI，并且提供了人性化的错误提示和单页面适配。<br>网址：<a href="http://oaui.yucow.com" target="_blank" rel="external">http://oaui.yucow.com</a><br>如下图：<br><img src="/2017/05/17/六步搞定组件化单页面/oaui-1.png" alt="oaui" title="oaui"><img src="/2017/05/17/六步搞定组件化单页面/图1.png" alt="oaui" title="oaui"></p>
<h2 id="第二步：单页面框架选型"><a href="#第二步：单页面框架选型" class="headerlink" title="第二步：单页面框架选型"></a>第二步：单页面框架选型</h2><blockquote>
<p>TIPS：生厂一类汽车，该让什么厂生产呢？大厂快但是耗费多，小厂耗费少但是慢，怎么选？这个时候就需要根据我们的需求场景来选择一个合适的，如果量大时间紧果断大厂送过去，如果钱少周期长，小厂也很稳健。</p>
</blockquote>
<p>组件标准梳理完成后，下一步就是考虑用什么框架组装了，也就是单页面框架选型。现在可供选择的单页面框架不少，比如Vue，React，Angular2, Ember, Polymer等，而其中Vue, React，Angular最受欢迎。最终我选择的是Vue。为什么选它呢？我们先讲讲Angular2，Angular2的目标是一套企业级的解决方案，从它用Typescript这种规范性比较强的官方语言就可以看出，是比较重的。而React呢，Vue和React都用的虚拟Dom，性能都非常快，所以对于这两个我主要考虑的也是入手的门槛。React提倡just javascript，模板编写很灵活，但JavaScript里的HTMl和CSS会产生很多痛点，灵活有时候会写出凌乱的render，而且JSX的使用也增加了学习成本。<br>但是这样的比较很感官，做出的判断不准确，这里我说一个选择的方法。就和我们去菜市场买菜一样，哪个性价比高买哪个，选择框架也一样。性指的是性能，价指的是成本，而框架的成本主要是学习成本和开发维护成本。我们针对这三个框架列一个对比表：</p>
<table style="text-align:center;"><tr><td rowspan="2">框架/基于轻应用场景</td><td colspan="2">成本</td><td rowspan="2">性能/耗时</td></tr><tr><td>学习成本</td><td>开发维护成本</td></tr><tr><td>Vue</td><td>低</td><td>低</td><td>快（1.37）</td></tr><tr><td>React</td><td>中</td><td>低</td><td>较快（1.82）</td></tr><tr><td>Angular2</td><td>高</td><td>中</td><td>较快（1.85）</td></tr></table>

<p>上面这个表格可以让我们轻松做出选择，不过表格里面的内容不是固定不变的，也会根据特定的场景改变，比如react的社区生态是最繁荣的，里面的各种解决方案也很多，如果里面有刚好适合你的业务场景的，那么对应的就可以降低开发成本。<br>对于Vue，往往也需要搭配了Vue-router和Vuex。也就是单页面三件套：核心解析，路由，状态管理。Vue和React都有对应的脚手架帮你搭建初始的工程化环境，里面配套了热加载，代码规范检测，单元测试，端对端测试等</p>
<h2 id="第三步：组件划分"><a href="#第三步：组件划分" class="headerlink" title="第三步：组件划分"></a>第三步：组件划分</h2><blockquote>
<p>TIPS：对于一辆汽车，四个轮子都是一样的，肯定直接给一个流水线组。而前盖和后盖呢？可能前盖需要完美线条，后盖不需要，那么要到两个流水线组。但对于前盖和后盖都是粗线条的，如果分成两个流水线组，因为用的技术都差不多，对应的技术人员要在两个流水线来回跑，就浪费时间了。</p>
</blockquote>
<p>对于单页面应用，页面也是一个组件，而每个组件中又有很多的子组件。对于组件的划分，优先级最高的是页面组件，而且以相似度为标准进行划分，如果两个相似程度不高的内容放在一个组件中只会徒增判断维护成本。而两个相似度高的内容放在不同组件也会增加数据维护成本，所以要让成本降到最低就得有合理的组件划分。<br>比如下面的两个页面组件（每个页面组件中有多个子组件，但我们现在只考虑页面组件）：</p>
<img src="/2017/05/17/六步搞定组件化单页面/component-1.png" alt="component" title="component"><img src="/2017/05/17/六步搞定组件化单页面/component-3.png" alt="component" title="component">
<p>它们相似度很高，如果划为不同组件页面，有些地方一修改就是都要修改，比如数据筛选处理，这样就增加了不必要的维护成本。将其整合到一个组件中，成本一下就下来了</p>
<h2 id="第四步：状态结构设计"><a href="#第四步：状态结构设计" class="headerlink" title="第四步：状态结构设计"></a>第四步：状态结构设计</h2><blockquote>
<p>TIPS：汽车流水线中，每个零件的顺序会影响组装的速度，而组装的过程中又不断的改进零件顺序</p>
</blockquote>
<p>每个单页面都有全局状态，比如地理位置之类的，我们也可以称之为缓存。对于全局状态，Vue有它官方的状态管理插件Vuex，而这部分讲的是被管理数据状态的结构。数据结构决定程序！而单页面中全局状态结构对程序影响是很大的。<br>拿OA中列表的状态结构来说，请假列表在异步批量办理时，用户可能返回导航，进入详情页等，所以需要保存状态。对于保存方法大家可能很容易就想到了列表栈，这是一种方法。但是对于列表除了批量还有其他状态，比如滚动的位置，列表的内容，搜索标题等。如果采用独立栈的方式，会带来每次进入列表时对栈进行匹配判断的开销。如果将结构改为树结构，然后用一个指针指向对应树节点，这样的话每个节点相互独立，不仅减少了维护成本，而且代码优雅简洁</p>
<img src="/2017/05/17/六步搞定组件化单页面/state-1.png" alt="component" title="component">
<p><br></p>
<h2 id="第五步：开发实践"><a href="#第五步：开发实践" class="headerlink" title="第五步：开发实践"></a>第五步：开发实践</h2><blockquote>
<p>TIPS：图纸画好，方案确定，流水线也规划完成，剩下的就是开工了，打磨的打磨，清洗的清洗。</p>
</blockquote>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>前面我们组件标准制定的时候有提到组件分为两种：通用组件和业务组件，这两种组件在我们实际的开发中应用方式是不一样的。</p>
<p>1．通用组件是一个独立封装的库，和Vue还是单页面都没有关联，可平滑移植到不同的项目，调用方式也只需一个函数接口进行调用，比如弹窗，时间选择，确认选择等，如下图：</p>
<img src="/2017/05/17/六步搞定组件化单页面/图片9.png" alt="component" title="component"><img src="/2017/05/17/六步搞定组件化单页面/图片10.png" alt="component" title="component">
<p>2．业务组件是针对当前项目的组件，每个页面模块也是一个组件，而组件中又会有很多子组件子组件和父组件可以通过prop，slot等方式进行通信。</p>
<img src="/2017/05/17/六步搞定组件化单页面/图片11.png" alt="component" title="component">
<p>而每个组件都有自己的生命周期，有：beforeCreate,created,beforeMount,mounted等，实际开发中可以根据自己的需要在不同的阶段做对应的操作，以列表页组件为例，大致的周期如图：</p>
<img src="/2017/05/17/六步搞定组件化单页面/图片12.png" alt="component" title="component">
<h3 id="可配置化"><a href="#可配置化" class="headerlink" title="可配置化"></a>可配置化</h3><p>OA现在移动端已实现通过配置实现流程的新增修改：<br><img src="/2017/05/17/六步搞定组件化单页面/图片13.png" alt="component" title="component"> <img src="/2017/05/17/六步搞定组件化单页面/图片14.png" alt="component" title="component"></p>
<p>实现主要靠三个部分：配置信息，特殊处理库和结构解析器<br>1.配置信息：配置信息是页面结构的依据，修改配置信息也就修改了页面结构。而页面的结构可能有判断，循环，或判断和循环相互嵌套。所以配置信息需要根据页面结构进行设计，同时考虑解析的问题<br>2.特殊处理库(适配器)：对于组件我们可以统一处理，但是对于非组件，或需要进行加工的源数据，就需要特殊处理了。而在调用特殊处理接口时建议使用APPLY或CALL，方便和模块共用一套参数<br>3.结构解析器：配置结构是多层的，每层大致可分为行、判断、循环三种块。对于这种复杂的结构，使用简单的循环肯定走不通，必须使用递归和决策树的方式进行层层解析，然后行解析、单元解析，其中注意使用正则做字符串匹配<br>总体结构如图：</p>
<p><img src="/2017/05/17/六步搞定组件化单页面/图片15.png" alt="component" title="component"><br></p>
<h2 id="第六步：测试"><a href="#第六步：测试" class="headerlink" title="第六步：测试"></a>第六步：测试</h2><blockquote>
<p>TIPS：车的生产要有质量保证，就必须进行测试。有细致的测试比如量量轮子，敲敲玻璃。也可以整体的测试，比如开到沙漠，开到沼泽。</p>
</blockquote>
<p>每一个产品生产出来都离不开测试，不过我这一步讲的不是交给测试人员进行测试，而是在此之前，开发人员做的测试。在前端还是简单切页面的时候，是基本不需要测试的，也没那个必要。而随着前端越来越重，单页面的逻辑也越来越复杂，复杂要想保证质量的话就必须进行测试。<br>现在前端的测试主要有两个：单元测试和端对端测试。端对端测试是一个整体的测试，移动端应用使用端对端测试的必要性不大，而PC上需要兼容不同浏览器的时候比较用得上，VUE官方标配的端对端测试框架是nightWatch，而市面上还有casperJS,protractor等。单元测试是一种比较细致的测试，我们可以进行有目的的测试，比如涉及一些数据处理的单元就很适合也有必要做单元测试，测试的节奏也可以根据自己的情况安排，既可以边开发边测试也可以开发完后再测试，单元测试Vue的官方标配是karma+mocha，当然除了mocha你还可以用jasmine等，测试完成后可以用网页查看覆盖率。如图：</p>
<p><img src="/2017/05/17/六步搞定组件化单页面/图片16.png" alt="component" title="component"><br></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>完成了以上六步也就完成了一个组件化单页面应用了，大家看了这六步会发现我花了不少的时间在前期的选型和结构设计上，而我觉得这个是非常有必要的，一个好的选型和结构会让你在后期事半功倍，这是性价比很高的投入。合理的投入才能有合理的产出，希望大家看完后文章能在组件化单页面的开发中将投入达到更合理</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;适读人群：&lt;br&gt;1.具备工程化思维的前端&lt;br&gt;2.想了解现阶段前后端的合作方式的后端&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;文章以单页面为核心阐述它的实现过程，
    
    </summary>
    
      <category term="架构" scheme="https://nodesoya.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Vue" scheme="https://nodesoya.github.io/tags/Vue/"/>
    
      <category term="组件化" scheme="https://nodesoya.github.io/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
      <category term="可配置" scheme="https://nodesoya.github.io/tags/%E5%8F%AF%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>
