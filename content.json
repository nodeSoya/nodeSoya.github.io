{"meta":{"title":"sfloat的博客","subtitle":"阻止成长的不是无知，而是傲慢与偏见","description":null,"author":"sfloat","url":"https://nodesoya.github.io"},"pages":[{"title":"","date":"2017-05-17T02:45:23.255Z","updated":"2017-05-17T02:45:23.255Z","comments":false,"path":"categories/index.html","permalink":"https://nodesoya.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2017-05-17T02:45:38.716Z","updated":"2017-05-17T02:45:38.716Z","comments":false,"path":"tags/index.html","permalink":"https://nodesoya.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"六步搞定组件化单页面","slug":"六步搞定组件化单页面","date":"2017-05-17T07:39:52.000Z","updated":"2017-05-17T10:48:43.810Z","comments":true,"path":"2017/05/17/六步搞定组件化单页面/","link":"","permalink":"https://nodesoya.github.io/2017/05/17/六步搞定组件化单页面/","excerpt":"","text":"适读人群：1.具备工程化思维的前端2.想了解现阶段前后端的合作方式的后端 概述文章以单页面为核心阐述它的实现过程，里面涉及概念的东西不多，因为考虑到讲概念去对大家帮助不大，而且这些概念随手百度google都可以找到。所以文章主要从大体步骤的角度简单讲讲的是我是如何将OA重构成组件化单页面应用，并且实现通过配置完成新流程的动态添加的。希望大家读完后能对此类项目有个基本的实现思路 第一步：制定组件标准 TIPS：车在组装各零件之前，得先将各个零件规范起来，不能这个轮子1m长那个轮子1.2m的，这样就四不像了。 实现组件化的前提是得标准化。怎么完成标准化呢？大概步骤可分为三步：1.以重用度为标准归纳和分类各组件。而组件中主要分为两种：通用组件和业务组件，通用组件如弹窗、按钮、时间插件等，业务组件如顶部个人信息，机票块信息等跟业务相关的组件。2.将归纳出来的组件进行设计，统一风格。3.根据UI给的设计图编写组件库。类似微信的WeUI，我也写了一个OAUI，并且提供了人性化的错误提示和单页面适配。网址：http://oaui.yucow.com如下图： 第二步：单页面框架选型 TIPS：生厂一类汽车，该让什么厂生产呢？大厂快但是耗费多，小厂耗费少但是慢，怎么选？这个时候就需要根据我们的需求场景来选择一个合适的，如果量大时间紧果断大厂送过去，如果钱少周期长，小厂也很稳健。 组件标准梳理完成后，下一步就是考虑用什么框架组装了，也就是单页面框架选型。现在可供选择的单页面框架不少，比如Vue，React，Angular2, Ember, Polymer等，而其中Vue, React，Angular最受欢迎。最终我选择的是Vue。为什么选它呢？我们先讲讲Angular2，Angular2的目标是一套企业级的解决方案，从它用Typescript这种规范性比较强的官方语言就可以看出，是比较重的。而React呢，Vue和React都用的虚拟Dom，性能都非常快，所以对于这两个我主要考虑的也是入手的门槛。React提倡just javascript，模板编写很灵活，但JavaScript里的HTMl和CSS会产生很多痛点，灵活有时候会写出凌乱的render，而且JSX的使用也增加了学习成本。但是这样的比较很感官，做出的判断不准确，这里我说一个选择的方法。就和我们去菜市场买菜一样，哪个性价比高买哪个，选择框架也一样。性指的是性能，价指的是成本，而框架的成本主要是学习成本和开发维护成本。我们针对这三个框架列一个对比表： 框架/基于轻应用场景成本性能/耗时学习成本开发维护成本Vue低低快（1.37）React中低较快（1.82）Angular2高中较快（1.85） 上面这个表格可以让我们轻松做出选择，不过表格里面的内容不是固定不变的，也会根据特定的场景改变，比如react的社区生态是最繁荣的，里面的各种解决方案也很多，如果里面有刚好适合你的业务场景的，那么对应的就可以降低开发成本。对于Vue，往往也需要搭配了Vue-router和Vuex。也就是单页面三件套：核心解析，路由，状态管理。Vue和React都有对应的脚手架帮你搭建初始的工程化环境，里面配套了热加载，代码规范检测，单元测试，端对端测试等 第三步：组件划分 TIPS：对于一辆汽车，四个轮子都是一样的，肯定直接给一个流水线组。而前盖和后盖呢？可能前盖需要完美线条，后盖不需要，那么要到两个流水线组。但对于前盖和后盖都是粗线条的，如果分成两个流水线组，因为用的技术都差不多，对应的技术人员要在两个流水线来回跑，就浪费时间了。 对于单页面应用，页面也是一个组件，而每个组件中又有很多的子组件。对于组件的划分，优先级最高的是页面组件，而且以相似度为标准进行划分，如果两个相似程度不高的内容放在一个组件中只会徒增判断维护成本。而两个相似度高的内容放在不同组件也会增加数据维护成本，所以要让成本降到最低就得有合理的组件划分。比如下面的两个页面组件（每个页面组件中有多个子组件，但我们现在只考虑页面组件）： 它们相似度很高，如果划为不同组件页面，有些地方一修改就是都要修改，比如数据筛选处理，这样就增加了不必要的维护成本。将其整合到一个组件中，成本一下就下来了 第四步：状态结构设计 TIPS：汽车流水线中，每个零件的顺序会影响组装的速度，而组装的过程中又不断的改进零件顺序 每个单页面都有全局状态，比如地理位置之类的，我们也可以称之为缓存。对于全局状态，Vue有它官方的状态管理插件Vuex，而这部分讲的是被管理数据状态的结构。数据结构决定程序！而单页面中全局状态结构对程序影响是很大的。拿OA中列表的状态结构来说，请假列表在异步批量办理时，用户可能返回导航，进入详情页等，所以需要保存状态。对于保存方法大家可能很容易就想到了列表栈，这是一种方法。但是对于列表除了批量还有其他状态，比如滚动的位置，列表的内容，搜索标题等。如果采用独立栈的方式，会带来每次进入列表时对栈进行匹配判断的开销。如果将结构改为树结构，然后用一个指针指向对应树节点，这样的话每个节点相互独立，不仅减少了维护成本，而且代码优雅简洁 第五步：开发实践 TIPS：图纸画好，方案确定，流水线也规划完成，剩下的就是开工了，打磨的打磨，清洗的清洗。 组件前面我们组件标准制定的时候有提到组件分为两种：通用组件和业务组件，这两种组件在我们实际的开发中应用方式是不一样的。 1．通用组件是一个独立封装的库，和Vue还是单页面都没有关联，可平滑移植到不同的项目，调用方式也只需一个函数接口进行调用，比如弹窗，时间选择，确认选择等，如下图： 2．业务组件是针对当前项目的组件，每个页面模块也是一个组件，而组件中又会有很多子组件子组件和父组件可以通过prop，slot等方式进行通信。 而每个组件都有自己的生命周期，有：beforeCreate,created,beforeMount,mounted等，实际开发中可以根据自己的需要在不同的阶段做对应的操作，以列表页组件为例，大致的周期如图： 可配置化OA现在移动端已实现通过配置实现流程的新增修改： 实现主要靠三个部分：配置信息，特殊处理库和结构解析器1.配置信息：配置信息是页面结构的依据，修改配置信息也就修改了页面结构。而页面的结构可能有判断，循环，或判断和循环相互嵌套。所以配置信息需要根据页面结构进行设计，同时考虑解析的问题2.特殊处理库(适配器)：对于组件我们可以统一处理，但是对于非组件，或需要进行加工的源数据，就需要特殊处理了。而在调用特殊处理接口时建议使用APPLY或CALL，方便和模块共用一套参数3.结构解析器：配置结构是多层的，每层大致可分为行、判断、循环三种块。对于这种复杂的结构，使用简单的循环肯定走不通，必须使用递归和决策树的方式进行层层解析，然后行解析、单元解析，其中注意使用正则做字符串匹配总体结构如图： 第六步：测试 TIPS：车的生产要有质量保证，就必须进行测试。有细致的测试比如量量轮子，敲敲玻璃。也可以整体的测试，比如开到沙漠，开到沼泽。 每一个产品生产出来都离不开测试，不过我这一步讲的不是交给测试人员进行测试，而是在此之前，开发人员做的测试。在前端还是简单切页面的时候，是基本不需要测试的，也没那个必要。而随着前端越来越重，单页面的逻辑也越来越复杂，复杂要想保证质量的话就必须进行测试。现在前端的测试主要有两个：单元测试和端对端测试。端对端测试是一个整体的测试，移动端应用使用端对端测试的必要性不大，而PC上需要兼容不同浏览器的时候比较用得上，VUE官方标配的端对端测试框架是nightWatch，而市面上还有casperJS,protractor等。单元测试是一种比较细致的测试，我们可以进行有目的的测试，比如涉及一些数据处理的单元就很适合也有必要做单元测试，测试的节奏也可以根据自己的情况安排，既可以边开发边测试也可以开发完后再测试，单元测试Vue的官方标配是karma+mocha，当然除了mocha你还可以用jasmine等，测试完成后可以用网页查看覆盖率。如图： 最后完成了以上六步也就完成了一个组件化单页面应用了，大家看了这六步会发现我花了不少的时间在前期的选型和结构设计上，而我觉得这个是非常有必要的，一个好的选型和结构会让你在后期事半功倍，这是性价比很高的投入。合理的投入才能有合理的产出，希望大家看完后文章能在组件化单页面的开发中将投入达到更合理","categories":[{"name":"架构","slug":"架构","permalink":"https://nodesoya.github.io/categories/架构/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://nodesoya.github.io/tags/Vue/"},{"name":"组件化","slug":"组件化","permalink":"https://nodesoya.github.io/tags/组件化/"},{"name":"可配置","slug":"可配置","permalink":"https://nodesoya.github.io/tags/可配置/"}]}]}